import numpy as np
import tensorflow as tf
from datetime import datetime, timedelta
import matplotlib.pyplot as plt

# Datos ficticios de entrenamiento (monto del préstamo, salario, gastos y duración en días)
# Aquí deberías tener datos reales

num_samples = 10  # Número de muestras

salary = np.random.randint(10, 75000000, num_samples)
loan_amount = np.random.randint(500000, 1500000, num_samples)
expenses = np.random.randint(5, 23000, num_samples)
duration_days = np.random.randint(1, 72, num_samples)

# Calcular la cuota a pagar (asumiendo una tasa de interés fija del 1.8%)
interest_rate = 0.12
monthly_interest_rate = interest_rate / 12
monthly_payment = loan_amount * monthly_interest_rate / (1 - (1 + monthly_interest_rate) ** (-duration_days / 30))

# Calcular el tiempo necesario para pagar el préstamo en meses
duration_months = (duration_days / 30).astype(int)

# Etiqueta de elegibilidad (1 para apto, 0 para no apto)
eligible = np.where((salary - expenses) > monthly_payment, 1, 0)

# Crear un modelo de regresión logística
model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(1, activation='sigmoid', input_shape=(3,))
])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Entrenar el modelo con los datos ficticios
X = np.column_stack((loan_amount, salary, expenses))
y = eligible
model.fit(X, y, epochs=100, verbose=0)

# Solicitar al estudiante que ingrese su salario, sus gastos, el monto del préstamo y la duración en meses
student_loan_amount = float(input("Ingrese el monto del préstamo que desea obtener: "))
student_salary = float(input("Ingrese su salario mensual: "))
student_expenses = float(input("Ingrese sus gastos mensuales: "))
student_duration_months = int(input("Ingrese la duración en meses para pagar el préstamo: "))

# Calcular la cuota mensual estimada a pagar para el estudiante
student_data = np.array([[student_loan_amount, student_salary, student_expenses]])
prediction = model.predict(student_data)

if prediction > 0.5:
    eligibility = "apto"
    student_duration = int(student_duration_months)
    student_monthly_payment = (
        student_loan_amount * monthly_interest_rate / (1 - (1 + monthly_interest_rate) ** -student_duration)
    )
    current_date = datetime.now()
    final_date = current_date + timedelta(days=student_duration * 30)  # Multiplicamos por 30 para convertir meses a días
else:
    eligibility = "no apto"
    student_duration = None
    student_monthly_payment = None
    final_date = None

print(f"El estudiante es {eligibility} para el préstamo.")
if student_monthly_payment is not None:
    print(f"La cuota mensual estimada a pagar es: ${student_monthly_payment:.2f}")
if student_duration is not None:
    print(f"Se cancelaría la totalidad del préstamo en aproximadamente {student_duration} meses.")
    print(f"Fecha estimada de pago completo: {final_date.strftime('%Y-%m-%d')}")
    
# Crear un gráfico de barras apiladas para visualizar la relación entre características y elegibilidad en función del tiempo
fig, ax = plt.subplots(figsize=(10, 6))
time_periods = np.unique(duration_months)

salaries = []
expenses_list = []
loan_amounts = []

for time_period in time_periods:
    indices = duration_months == time_period
    salaries.append(np.sum(salary[indices]))
    expenses_list.append(np.sum(expenses[indices]))
    loan_amounts.append(np.sum(loan_amount[indices]))

width = 0.35

p1 = ax.bar(time_periods, salaries, width, label='Salario')
p2 = ax.bar(time_periods, expenses_list, width, label='Gastos', bottom=salaries)
p3 = ax.bar(time_periods, loan_amounts, width, label='Monto del Préstamo', bottom=np.array(salaries) + np.array(expenses_list))

ax.set_xlabel('Tiempo de Préstamo (meses)')
ax.set_ylabel('Valores')
ax.set_title('Relación entre Características y Elegibilidad en función del Tiempo de Préstamo')
ax.legend()
plt.show()