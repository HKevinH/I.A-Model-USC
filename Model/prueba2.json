import numpy as np
import tensorflow as tf
from datetime import datetime, timedelta
import csv

monto_prestamo_str = input("Ingrese el monto del préstamo que desea obtener: ")
salario_str = input("Ingrese su salario mensual: ")
gastos_str = input("Ingrese sus gastos mensuales: ")
duracion_meses_str = input("Ingrese la duración en meses para pagar el préstamo: ")

# Reemplazar comas por puntos y eliminar puntos de miles
monto_prestamo_str = monto_prestamo_str.replace(',', '').replace('.', '')
salario_str = salario_str.replace(',', '').replace('.', '')
gastos_str = gastos_str.replace(',', '').replace('.', '')

# Convertir la entrada del usuario a números de punto flotante
monto_prestamo = float(monto_prestamo_str)
salario = float(salario_str)
gastos = float(gastos_str)
duracion_meses = int(duracion_meses_str)


# Crear una lista para almacenar los resultados
resultados = []
resultado = {
    "salario": salario,
    "monto_prestamo": monto_prestamo,
    "gastos": gastos,
    "duracion_meses": duracion_meses,
    "elegibilidad": None,
    "cuota_mensual": None,
    "fecha_final": None
}

# Calcular la cuota mensual estimada a pagar para el estudiante
tasa_interes = 0.12  # Tasa de interés del 12%
tasa_interes_mensual = tasa_interes / 12
cuota_mensual = monto_prestamo * tasa_interes_mensual / (1 - (1 + tasa_interes_mensual) ** (-duracion_meses))

# Etiqueta de elegibilidad (1 para apto, 0 para no apto)
elegible = 1 if (salario - gastos) > cuota_mensual else 0

resultado["elegibilidad"] = elegible
resultado["cuota_mensual"] = cuota_mensual

# Guardar el resultado en la lista
resultados.append(resultado)

# Guardar los resultados en un archivo CSV
with open("resultados.csv", "a", newline="") as csvfile:  # Usamos "a" para abrir el archivo en modo adición
    nombres_campos = resultados[0].keys()
    writer = csv.DictWriter(csvfile, fieldnames=nombres_campos)

    # Comprobamos si el archivo está vacío, y si lo está, escribimos el encabezado
    if csvfile.tell() == 0:
        writer.writeheader()

    # Escribimos los nuevos resultados
    writer.writerows(resultados)

# Crear un modelo de regresión logística (aunque con datos ficticios)
modelo = tf.keras.models.Sequential([
    tf.keras.layers.Dense(1, activation='sigmoid', input_shape=(3,))
])
modelo.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Entrenar el modelo con datos ficticios (necesitarías datos reales para un entrenamiento efectivo)
X = np.array([[r["monto_prestamo"], r["salario"], r["gastos"]] for r in resultados])
y = np.array([r["elegibilidad"] for r in resultados])
modelo.fit(X, y, epochs=100, verbose=0)

# Calcular la cuota mensual estimada a pagar para el estudiante
datos_estudiante = np.array([resultado["monto_prestamo"], resultado["salario"], resultado["gastos"]])
prediccion = modelo.predict(datos_estudiante.reshape(1, -1))  # Asegúrate de que los datos tengan la forma adecuada

if prediccion > 0.5:
    elegibilidad = "apto"
    duracion_estimada = int(resultado["duracion_meses"])
    cuota_mensual_estimada = (
        resultado["monto_prestamo"] * tasa_interes_mensual / (1 - (1 + tasa_interes_mensual) ** -duracion_estimada)
    )
    cuota_mensual_estimada = '{:,.2f}'.format(cuota_mensual_estimada)  # Formatear con comas y dos decimales
    fecha_actual = datetime.now()
    fecha_final = fecha_actual + timedelta(days=duracion_estimada * 30)  # Multiplicamos por 30 para convertir meses a días
else:
    elegibilidad = "no apto"
    duracion_estimada = None
    cuota_mensual_estimada = None
    fecha_final = None

print(f"El estudiante es {elegibilidad} para el préstamo.")
if cuota_mensual_estimada is not None:
    print(f"La cuota mensual estimada a pagar es: {cuota_mensual_estimada}")
if duracion_estimada is not None:
    print(f"Se cancelaría la totalidad del préstamo en aproximadamente {duracion_estimada} meses.")
    print(f"Fecha estimada de pago completo: {fecha_final.strftime('%Y-%m-%d')}")
